{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","item","_this","this","react_default","a","createElement","className","onClick","props","deleteCardCallback","id","text","emoji","getUnicode","Component","EMOJI_LIST","NewCardForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onFormChange","event","field","target","name","value","updatedState","setState","onSubmit","preventDefault","_this$state","state","addCardCallback","htmlFor","onChange","map","index","key","type","Board","deleteCard","cardId","console","log","axios","delete","concat","cardUrl","then","response","cards","card","find","splice","indexOf","catch","error","errorMessage","message","addCard","newCard","apiPayLoad","post","boardUrl","myNewCard","data","push","boards","boardName","_this2","get","board","objectSpread","_this3","cardCollection","i","src_components_Card","assign","src_components_NewCardForm","App","src_components_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8bc9f80b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nclass Card extends Component {\n\n  render() {\n    const getEmoji = (item) => (item && emoji.getUnicode(item));\n\n    return (\n      <div className=\"card\">\n        <button className=\"card__delete\" onClick={() => this.props.deleteCardCallback(this.props.id)}>x</button>\n        <div className=\"card__content\">\n          <p className=\"card__content-text\">{this.props.text}</p>\n          <p className=\"card__content-emoji\">{getEmoji(this.props.emoji)}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nCard.propTypes = {\n  text: PropTypes.string,\n  emoji: PropTypes.string,\n  deleteCardCallback: PropTypes.func,\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nclass NewCardForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: '',\n      emoji: '',\n    }\n  }\n\n  onFormChange = (event) => {\n    const field = event.target.name;\n    const value = event.target.value;\n\n    const updatedState = {};\n\n    updatedState[field] = value;\n\n    this.setState(updatedState);\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    const { text, emoji } = this.state;\n\n    if (text === '' && emoji === '') return;\n\n    this.props.addCardCallback(this.state);\n\n    this.setState({\n      text: '',\n      emoji: '',\n    })\n  }\n\n  render() {\n    const getEmoji = (item) => (item && emoji.getUnicode(item));\n\n    return (\n      <section className=\"new-card-form\">\n        <h3 className=\"new-card-form__header\">Add an inspiration</h3>\n        <form className=\"new-card-form__form\" onSubmit={this.onSubmit}>\n\n            <label className=\"new-card-form__form-label\" htmlFor=\"text\">Text</label>\n            <textarea className=\"new-card-form__form-textarea\" name=\"text\" onChange={this.onFormChange} value={this.state.text}></textarea>\n\n            <label className=\"new-card-form__form-label\" htmlFor=\"emoji\">Emoji</label>\n            <select className=\"new-card-form__form-select\" name=\"emoji\"\n              onChange={this.onFormChange} value={this.state.emoji}>\n            {EMOJI_LIST.map((value, index) => <option key={index} value={value}>{getEmoji(value)}</option>)}\n            </select>\n\n          <input className=\"new-card-form__form-button\" type=\"submit\" name=\"submit\" value=\"Submit\" />\n        </form>\n      </section>\n    );\n  }\n}\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func.isRequired,\n}\n\nexport default NewCardForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n// import CARD_DATA from '../data/card-data.json';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [],\n      boards: [],\n      boardUrl: `${this.props.boardUrl}${this.props.boardName}/cards`,\n    };\n  }\n\n  componentDidMount() {\n    axios.get(this.props.boardUrl)\n      .then((response) => {\n        const boards = response.data.map((board) => {\n          const newBoard = {\n            ...board.board,\n          }\n          return newBoard;\n        })\n        this.setState({boards: boards});\n        console.log(this.state);\n      })\n      .catch( (error) => {\n        this.setState({\n          errorMessage: `Failure ${error.message}`,\n        })\n      })\n\n    axios.get(this.state.boardUrl)\n      .then((response) => {\n        const cards = response.data.map((card) => {\n          const newCard = {\n            ...card.card,\n          }\n          return newCard;\n        })\n        this.setState({cards: cards});\n        console.log(this.state);\n      })\n      .catch( (error) => {\n        this.setState({\n          errorMessage: `Failure ${error.message}`,\n        })\n      })\n  }\n\n  deleteCard = (cardId) => {\n    console.log(cardId);\n    axios.delete(`${this.props.cardUrl}${cardId}`)\n      .then( (response) => {\n        console.log(response);\n        const cards = this.state.cards;\n\n        const card = cards.find( (card) => {\n          return card.id === cardId;\n        })\n\n        cards.splice( cards.indexOf(card), 1 );\n\n        this.setState({cards: cards})\n      })\n      .catch( (error) => {\n        this.setState({\n          errorMessage: `Failure ${error.message}`,\n        })\n      })\n  }\n\n  addCard = (newCard) => {\n    console.log(newCard);\n    const apiPayLoad = {\n      text: newCard.text,\n      emoji: newCard.emoji,\n    }\n\n    axios.post(this.state.boardUrl, apiPayLoad)\n      .then( (response) => {\n        console.log(response);\n        const myNewCard = response.data;\n        console.log(myNewCard);\n\n        const cards = this.state.cards;\n        cards.push(myNewCard.card);\n\n        this.setState({cards: cards});\n        console.log(this.state)\n      })\n      .catch( (error) => {\n        this.setState({\n          errorMessage: `Failure ${error.message}`,\n        })\n      })\n  }\n\n  render() {\n    const cardCollection = this.state.cards.map((card, i) => {\n      return <Card\n              key={card.id}\n              {...card}\n              deleteCardCallback={this.deleteCard}\n              />\n    })\n    return (\n      <section>\n        <NewCardForm addCardCallback={this.addCard} />\n        <div className=\"board\">\n          {cardCollection}\n        </div>\n      </section>\n    )\n  }\n\n}\n\nBoard.propTypes = {\n  boardUrl: PropTypes.string.isRequired,\n  cardUrl: PropTypes.string,\n  boardName: PropTypes.string.isRequired,\n};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <header className=\"header\">\n          <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n        </header>\n        <Board\n          boardUrl=\"https://trangs-inspo-board-api.herokuapp.com/boards/\"\n          cardUrl=\"https://trangs-inspo-board-api.herokuapp.com/cards/\"\n          boardName=\"Trang\"\n          />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}